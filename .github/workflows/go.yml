# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: 🏗️ Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go 🎮
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install dependencies 🔧
      run: |
        go version
        go install golang.org/x/lint/golint@latest
        go install golang.org/x/tools/cmd/goimports@latest
        go install mvdan.cc/gofumpt@latest

    - name: Run vet & lint 🩺
      run: |
       go vet -v ./...
       golint -set_exit_status ./...

    - name: Run goimports 📥
      run: goimports -w .

    - name: Run go gofumpt 📐
      run: gofumpt -l -w .

    - name: Build 🧱
      run: go build -v ./...

    - name: Test 🧪
      run: go test -v ./... -coverprofile coverage.out

    - name: Update coverage report ☂️
      run: |
        COVERAGE=`go tool cover -func=coverage.out | grep total: | grep -Eo '[0-9]+\.[0-9]+'`
        echo $COVERAGE
        COLOR=orange
        if (( $(echo "$COVERAGE <= 50" | bc -l) )) ; then
          COLOR=red
        elif (( $(echo "$COVERAGE > 80" | bc -l) )); then
          COLOR=green
        fi
        curl "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > assets/coverage.svg


    - if: success()
      name: Commit files ✍️
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "[autogen] quality checks"
